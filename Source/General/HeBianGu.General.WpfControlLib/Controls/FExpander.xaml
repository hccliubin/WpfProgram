<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Style/FIcon.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Controls/FButton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type local:FExpander}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
         <!--内容背景色-->
        <Setter Property="Background" Value="{DynamicResource S_GrayLight}"/>
        <Setter Property="MinWidth" Value="180"/>
        <Setter Property="CanHide" Value="True"/>
        <Setter Property="IsExpanded" Value="False"/>
        <Setter Property="Hint" Value="{x:Null}"/>
        <!--详细信息颜色-->
        <Setter Property="HintBackground" Value="{DynamicResource S_AccentBrush}"/>
        <Setter Property="HintForeground" Value="{DynamicResource S_WhiteNotice}"/>

        <Style.Triggers>
            <Trigger Property="CanHide" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:FExpander}">
                            <Grid Background="{TemplateBinding Background}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup>
                                        <VisualState x:Name="Normal">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="0" Duration="0:0:0.15"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="0" Duration="0:0:0.15"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="StartNormal">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="0" Duration="0:0:0"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="0" Duration="0:0:0"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Expand">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="{Binding ElementName=content,Path=ActualHeight}" Duration="0:0:0.15"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="90" Duration="0:0:0.15"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="StartExpand">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="height" Storyboard.TargetProperty="(Height)" To="{Binding ElementName=content,Path=ActualHeight}" Duration="0:0:0"/>
                                                <DoubleAnimation Storyboard.TargetName="angle" Storyboard.TargetProperty="(Angle)" To="90" Duration="0:0:0"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border BorderBrush="{DynamicResource S_GrayLight}" BorderThickness="0,0,0,1">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="iconWidth" Width="Auto"/>
                                            <ColumnDefinition x:Name="IconFontWidth" Width="Auto"/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition x:Name="hintWidth" Width="Auto"/>
                                            <ColumnDefinition x:Name="algleWidth" Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <local:FButton Grid.ColumnSpan="5" Foreground="Transparent" Background="Transparent" Width="{TemplateBinding Width}" FIcon="" 
                                                       MouseOverBackground="Transparent" BorderThickness="0"  Command="local:FExpander.ButtonClickCommand"/>

                                        <Image Width="12" Height="12" Margin="10,0,0,0" VerticalAlignment="Center" Source="{TemplateBinding Icon}" Opacity="0.7"/>

                                        <!--图像-->
                                        <TextBlock Grid.Column="1" Style="{StaticResource FIcon}" FontSize="{TemplateBinding FontSize}" Width="12" Height="12" Margin="10,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding IconFont}" Opacity="0.7"/>

                                        <!--<Metro:MetroTextBlock Grid.Column="1" Text="{TemplateBinding Header}" Margin="10,8,5,8" VerticalAlignment="Center" HorizontalAlignment="Left" Opacity="0.65"/>
                                        
                                        <Metro:MetroBorder    Grid.Column="2" AutoCornerRadius="True" Margin="0,0,5,0" VerticalAlignment="Center" Background="{TemplateBinding HintBackground}">
                                            <Metro:MetroTextBlock VerticalAlignment="Center" Margin="8,1" Text="{TemplateBinding Hint}" Foreground="{TemplateBinding HintForeground}"/>
                                        </Metro:MetroBorder>-->

                                       <!--抬头文本-->
                                        <TextBlock Grid.Column="2" Text="{TemplateBinding Header}"  IsHitTestVisible="False"  Margin="10,8,5,8"  VerticalAlignment="Center" HorizontalAlignment="Left" Opacity="0.65"/>

                                        <!--详细信息背景-->
                                        <Border  Grid.Column="3" Margin="0,0,5,0" VerticalAlignment="Center"  IsHitTestVisible="False"   Background="{TemplateBinding HintBackground}">
                                            <TextBlock VerticalAlignment="Center" Margin="8,1" Text="{TemplateBinding Hint}" Foreground="{TemplateBinding HintForeground}"/>
                                        </Border>
                                        
                                        <!--下拉图标-->
                                        <Grid Grid.Column="4" Margin="10,0" VerticalAlignment="Center"  IsHitTestVisible="True" >
                                            <Polyline Points="0,0 5,5 0,10" Stroke="#000000" RenderTransformOrigin="0.5,0.5" Opacity="0.65">
                                                <Polyline.RenderTransform>
                                                    <TransformGroup>
                                                        <RotateTransform x:Name="angle" Angle="0"/>
                                                    </TransformGroup>
                                                </Polyline.RenderTransform>
                                            </Polyline>
                                        </Grid>
                                        <!--<Metro:MetroFocusButton Grid.ColumnSpan="4" Foreground="#00000000" MouseMoveForeground="#0C000000" BorderThickness="0" MouseMoveBorderThickness="0" Command="Metro:MetroExpander.ButtonClickCommand"/>-->


                                    </Grid>
                                </Border>
                                <Grid x:Name="height" Grid.Row="1" Background="{TemplateBinding Background}" Height="{Binding ActualHeight,ElementName=content}" ClipToBounds="True">
                                    <Canvas x:Name="canvas" Height="{Binding ActualHeight,ElementName=content}" MinWidth="{Binding ActualWidth,ElementName=content}">
                                        <Grid x:Name="content" ClipToBounds="True" MinWidth="{Binding ActualWidth,ElementName=canvas}">
                                            <ContentPresenter/>
                                        </Grid>
                                    </Canvas>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Hint" Value="{x:Null}">
                                    <Setter TargetName="hintWidth" Property="Width" Value="0"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="iconWidth" Property="Width" Value="0"/>
                                </Trigger>
                                <Trigger Property="IconFont" Value="{x:Null}">
                                    <Setter TargetName="IconFontWidth" Property="Width" Value="0"/>
                                </Trigger>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Setter TargetName="algleWidth" Property="MaxWidth" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="CanHide" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:FExpander}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border BorderBrush="{DynamicResource S_AccentBrush}" BorderThickness="0,0,0,1">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="iconWidth" Width="Auto"/>
                                            <ColumnDefinition x:Name="IconFontWidth" Width="Auto"/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition x:Name="hintWidth" Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        
                                        <Image Width="12" Height="12" Margin="10,0,0,0" VerticalAlignment="Center" Source="{TemplateBinding Icon}" Opacity="0.7"/>

                                        <!--图像-->
                                        <TextBlock Grid.Column="1" Style="{StaticResource FIcon}"  FontSize="{TemplateBinding FontSize}" Width="12" Height="12" Margin="10,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding IconFont}" Opacity="0.7"/>


                                        <!--<Metro:MetroTextBlock Grid.Column="1" Text="{TemplateBinding Header}" Margin="10,8,5,8" VerticalAlignment="Center" HorizontalAlignment="Left" Opacity="0.65"/>
                                        <Metro:MetroBorder    Grid.Column="2" AutoCornerRadius="True" Margin="0,0,5,0" VerticalAlignment="Center" Background="{TemplateBinding HintBackground}">
                                            <Metro:MetroTextBlock VerticalAlignment="Center" Margin="8,1" Text="{TemplateBinding Hint}" Foreground="{TemplateBinding HintForeground}"/>
                                        </Metro:MetroBorder>-->

                                        <TextBlock Grid.Column="2" Text="{TemplateBinding Header}" Margin="10,8,5,8" VerticalAlignment="Center" HorizontalAlignment="Left" Opacity="0.65"/>
                                       
                                        <Border    Grid.Column="3"  Margin="0,0,5,0" VerticalAlignment="Center" Background="{TemplateBinding HintBackground}">
                                            <TextBlock VerticalAlignment="Center" Margin="8,1" Text="{TemplateBinding Hint}" Foreground="{TemplateBinding HintForeground}"/>
                                        </Border>
                                    </Grid>
                                </Border>
                                
                                <Border Grid.Row="1" Background="{TemplateBinding Background}" BorderBrush="#e6e6e6" BorderThickness="0,0,0,1">
                                    <ContentPresenter/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Hint" Value="{x:Null}">
                                    <Setter TargetName="hintWidth" Property="Width" Value="0"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="iconWidth" Property="Width" Value="0"/>
                                </Trigger>
                                <Trigger Property="IconFont" Value="{x:Null}">
                                    <Setter TargetName="IconFontWidth" Property="Width" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource S_AccentBrush_MouseOver}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
